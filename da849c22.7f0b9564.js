(window.webpackJsonp=window.webpackJsonp||[]).push([[132],{197:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return c})),t.d(n,"metadata",(function(){return l})),t.d(n,"rightToc",(function(){return o})),t.d(n,"default",(function(){return b}));var a=t(3),r=t(7),i=(t(0),t(230)),c={},l={unversionedId:"programming-languages/golang/effective-go",id:"programming-languages/golang/effective-go",isDocsHomePage:!1,title:"effective-go",description:"fmt",source:"@site/docs\\programming-languages\\golang\\effective-go.md",slug:"/programming-languages/golang/effective-go",permalink:"/dddtdd-docs/docs/programming-languages/golang/effective-go",version:"current",lastUpdatedBy:"Colin Zuo",lastUpdatedAt:1616755928,sidebar:"docs",previous:{title:"\u7f16\u8bd1",permalink:"/dddtdd-docs/docs/programming-languages/golang/compile"},next:{title:"how-to-write-go-code",permalink:"/dddtdd-docs/docs/programming-languages/golang/how-to-write-go-code"}},o=[{value:"fmt",id:"fmt",children:[]},{value:"comment",id:"comment",children:[]},{value:"\u5408\u5e76\u58f0\u660e",id:"\u5408\u5e76\u58f0\u660e",children:[]},{value:"\u547d\u540d",id:"\u547d\u540d",children:[]},{value:"\u5206\u53f7",id:"\u5206\u53f7",children:[]},{value:"\u63a7\u5236\u7ed3\u6784",id:"\u63a7\u5236\u7ed3\u6784",children:[{value:"if",id:"if",children:[]},{value:"for",id:"for",children:[]},{value:"switch",id:"switch",children:[]}]},{value:"\u51fd\u6570",id:"\u51fd\u6570",children:[{value:"\u591a\u8fd4\u56de\u503c",id:"\u591a\u8fd4\u56de\u503c",children:[]},{value:"Named result parameters",id:"named-result-parameters",children:[]},{value:"Defer",id:"defer",children:[]}]},{value:"Data",id:"data",children:[{value:"\u4f7f\u7528new\u5206\u914d",id:"\u4f7f\u7528new\u5206\u914d",children:[]},{value:"\u6784\u9020\u51fd\u6570\u548ccomposite literals",id:"\u6784\u9020\u51fd\u6570\u548ccomposite-literals",children:[]},{value:"\u4f7f\u7528make\u5206\u914d",id:"\u4f7f\u7528make\u5206\u914d",children:[]},{value:"Arrays",id:"arrays",children:[]},{value:"Slices",id:"slices",children:[]},{value:"Two-dimensional slices",id:"two-dimensional-slices",children:[]},{value:"Maps",id:"maps",children:[]},{value:"Printing",id:"printing",children:[]},{value:"Append",id:"append",children:[]},{value:"\u5e38\u91cf",id:"\u5e38\u91cf",children:[]},{value:"init\u51fd\u6570",id:"init\u51fd\u6570",children:[]}]},{value:"Methods",id:"methods",children:[{value:"Pointers vs. Values",id:"pointers-vs-values",children:[]},{value:"Interface conversions and type assertions",id:"interface-conversions-and-type-assertions",children:[]},{value:"interface",id:"interface",children:[]}]}],s={rightToc:o};function b(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},s,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://golang.org/doc/effective_go"}),"https://golang.org/doc/effective_go")),Object(i.b)("h2",{id:"fmt"},"fmt"),Object(i.b)("p",null,"gofmt\u4f1a\u81ea\u52a8\u683c\u5f0f\u5316"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"type T struct {\n    name    string // name of the object\n    value   int    // its value\n}\n")),Object(i.b)("h2",{id:"comment"},"comment"),Object(i.b)("p",null,"//\u548c/* */\u4e24\u79cd\uff0cexport\u7684\u58f0\u660e\u524d\u5e94\u6709comment"),Object(i.b)("h2",{id:"\u5408\u5e76\u58f0\u660e"},"\u5408\u5e76\u58f0\u660e"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"var (\n    countLock   sync.Mutex\n    inputCount  uint32\n    outputCount uint32\n    errorCount  uint32\n)\n")),Object(i.b)("h2",{id:"\u547d\u540d"},"\u547d\u540d"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"package\u540d\u5b57\u5c0f\u5199\uff0c\u5355\u4e2a\u5b57"),Object(i.b)("li",{parentName:"ul"},"getter\u76f4\u63a5\u7528\u53d8\u91cf\u540d\uff0c\u4e0d\u52a0Get"),Object(i.b)("li",{parentName:"ul"},"interface\u540d\u5b57\u5728\u65b9\u6cd5\u540d\u540e\u52a0-er"),Object(i.b)("li",{parentName:"ul"},"\u591a\u4e2a\u8bcd\u7684\u7528\u9996\u5b57\u6bcd\u5927\u5199\u7ec4\u5408")),Object(i.b)("h2",{id:"\u5206\u53f7"},"\u5206\u53f7"),Object(i.b)("p",null,"\u4e00\u822c\u60c5\u51b5go\u4f1a\u6309\u7167\u8bed\u6cd5\u81ea\u52a8\u6dfb\u52a0\uff0c\u53ea\u6709for\u8bed\u53e5\u7b49\u9700\u8981\u4e3b\u52a8\u6dfb\u52a0"),Object(i.b)("h2",{id:"\u63a7\u5236\u7ed3\u6784"},"\u63a7\u5236\u7ed3\u6784"),Object(i.b)("h3",{id:"if"},"if"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"if x > 0 {\n    return y\n}\n\nif err := file.Chmod(0664); err != nil {\n    log.Print(err)\n    return err\n}\n")),Object(i.b)("h3",{id:"for"},"for"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"// Like a C for\nfor init; condition; post { }\n\n// Like a C while\nfor condition { }\n\n// Like a C for(;;)\nfor { }\n\nfor key, value := range oldMap {\n    newMap[key] = value\n}\n")),Object(i.b)("h3",{id:"switch"},"switch"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"// \u7a7aswitch\u4ee3\u8868true\u4e3a\u5339\u914d\nfunc unhex(c byte) byte {\n    switch {\n    case '0' <= c && c <= '9':\n        return c - '0'\n    case 'a' <= c && c <= 'f':\n        return c - 'a' + 10\n    case 'A' <= c && c <= 'F':\n        return c - 'A' + 10\n    }\n    return 0\n}\n\n// fallthrough\u901a\u8fc7,\u5b9e\u73b0\nfunc shouldEscape(c byte) bool {\n    switch c {\n    case ' ', '?', '&', '=', '#', '+', '%':\n        return true\n    }\n    return false\n}\n\n// \u63d0\u524dbreak switch case\n// break\u5916\u90e8for\u5faa\u73af\nLoop:\n    for n := 0; n < len(src); n += size {\n        switch {\n        case src[n] < sizeOne:\n            if validateOnly {\n                break\n            }\n            size = 1\n            update(src[n])\n\n        case src[n] < sizeTwo:\n            if n+1 >= len(src) {\n                err = errShortInput\n                break Loop\n            }\n            if validateOnly {\n                break\n            }\n            size = 2\n            update(src[n] + src[n+1]<<shift)\n        }\n    }\n\n// type Switch\nvar t interface{}\nt = functionOfSomeType()\nswitch t := t.(type) {\ndefault:\n    fmt.Printf(\"unexpected type %T\\n\", t)     // %T prints whatever type t has\ncase bool:\n    fmt.Printf(\"boolean %t\\n\", t)             // t has type bool\ncase int:\n    fmt.Printf(\"integer %d\\n\", t)             // t has type int\ncase *bool:\n    fmt.Printf(\"pointer to boolean %t\\n\", *t) // t has type *bool\ncase *int:\n    fmt.Printf(\"pointer to integer %d\\n\", *t) // t has type *int\n}  \n")),Object(i.b)("h2",{id:"\u51fd\u6570"},"\u51fd\u6570"),Object(i.b)("h3",{id:"\u591a\u8fd4\u56de\u503c"},"\u591a\u8fd4\u56de\u503c"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"func (file *File) Write(b []byte) (n int, err error)\n")),Object(i.b)("h3",{id:"named-result-parameters"},"Named result parameters"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"func nextInt(b []byte, pos int) (value, nextPos int)\n")),Object(i.b)("h3",{id:"defer"},"Defer"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),'    f, err := os.Open(filename)\n    if err != nil {\n        return "", err\n    }\n    defer f.Close()  // f.Close will run when we\'re finished\n')),Object(i.b)("h2",{id:"data"},"Data"),Object(i.b)("h3",{id:"\u4f7f\u7528new\u5206\u914d"},"\u4f7f\u7528new\u5206\u914d"),Object(i.b)("p",null,"new\u53ea\u5206\u914d\uff0c\u5e76\u7528zero\u8986\u76d6\uff0c\u4f46\u4e0d\u521d\u59cb\u5316"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"p := new(SyncedBuffer)  // type *SyncedBuffer\nvar v SyncedBuffer      // type  SyncedBuffer\n")),Object(i.b)("h3",{id:"\u6784\u9020\u51fd\u6570\u548ccomposite-literals"},"\u6784\u9020\u51fd\u6570\u548ccomposite literals"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"func NewFile(fd int, name string) *File {\n    if fd < 0 {\n        return nil\n    }\n    f := File{fd, name, nil, 0}\n    return &f\n}\n")),Object(i.b)("h3",{id:"\u4f7f\u7528make\u5206\u914d"},"\u4f7f\u7528make\u5206\u914d"),Object(i.b)("p",null,"make\u7528\u4e8e\u521b\u5efaslices, maps, and channels only, and it returns an initialized (not zeroed) value of type T (not *T)"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"var p *[]int = new([]int)       // allocates slice structure; *p == nil; rarely useful\nvar v  []int = make([]int, 100) // the slice v now refers to a new array of 100 ints\n")),Object(i.b)("h3",{id:"arrays"},"Arrays"),Object(i.b)("p",null,"Array\u662fvalue\uff0c\u5927\u5c0f\u662f\u7c7b\u578b\u7684\u4e00\u90e8\u5206"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"func Sum(a *[3]float64) (sum float64) {\n    for _, v := range *a {\n        sum += v\n    }\n    return\n}\n\narray := [...]float64{7.0, 8.5, 9.1}\nx := Sum(&array)  // Note the explicit address-of operator\n")),Object(i.b)("h3",{id:"slices"},"Slices"),Object(i.b)("p",null,"Slices wrap arrays to give a more general, powerful, and convenient interface to sequences of data."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"len\u7528\u4e8e\u83b7\u5f97\u957f\u5ea6"),Object(i.b)("li",{parentName:"ul"},"cap\u7528\u4e8e\u83b7\u5f97\u5f53\u524dcapacity"),Object(i.b)("li",{parentName:"ul"},"append\u5f53\u7a7a\u95f4\u4e0d\u591f\u65f6\u53ef\u91cd\u65b0\u5206\u914d")),Object(i.b)("h3",{id:"two-dimensional-slices"},"Two-dimensional slices"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),'text := [][]byte{\n    []byte("Now is the time"),\n    []byte("for all good gophers"),\n    []byte("to bring some fun to the party."),\n}\n\n// Allocate the top-level slice.\npicture := make([][]uint8, YSize) // One row per unit of y.\n// Loop over the rows, allocating the slice for each row.\nfor i := range picture {\n    picture[i] = make([]uint8, XSize)\n}\n')),Object(i.b)("h3",{id:"maps"},"Maps"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),'var timeZone = map[string]int{\n    "UTC":  0*60*60,\n    "EST": -5*60*60,\n    "CST": -6*60*60,\n    "MST": -7*60*60,\n    "PST": -8*60*60,\n}\n\n// \u5224\u65adkey\u662f\u5426\u5b58\u5728\nvar seconds int\nvar present bool\nseconds, present = timeZone[tz]\n\ndelete(timeZone, "PDT")  // Now on Standard Time\n')),Object(i.b)("h3",{id:"printing"},"Printing"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),'fmt.Printf("Hello %d\\n", 23)\nfmt.Fprint(os.Stdout, "Hello ", 23, "\\n")\nfmt.Println("Hello", 23)\nfmt.Println(fmt.Sprint("Hello ", 23))\n\n// \u6253\u5370\u7ed3\u6784\ntype T struct {\n    a int\n    b float64\n    c string\n}\nt := &T{ 7, -2.35, "abc\\tdef" }\nfmt.Printf("%v\\n", t)\nfmt.Printf("%+v\\n", t)\nfmt.Printf("%#v\\n", t)\nfmt.Printf("%#v\\n", timeZone)\nfmt.Printf("%T\\n", timeZone)\n\n//\u8f93\u51fa\n&{7 -2.35 abc   def}\n&{a:7 b:-2.35 c:abc     def}\n&main.T{a:7, b:-2.35, c:"abc\\tdef"}\nmap[string]int{"CST":-21600, "EST":-18000, "MST":-25200, "PST":-28800, "UTC":0}\nmap[string]int\n')),Object(i.b)("h3",{id:"append"},"Append"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"func append(slice []T, elements ...T) []T\n\nx := []int{1,2,3}\nx = append(x, 4, 5, 6)\nfmt.Println(x)\n\nx := []int{1,2,3}\ny := []int{4,5,6}\nx = append(x, y...)\nfmt.Println(x)\n")),Object(i.b)("h3",{id:"\u5e38\u91cf"},"\u5e38\u91cf"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"type ByteSize float64\n\nconst (\n    _           = iota // ignore first value by assigning to blank identifier\n    KB ByteSize = 1 << (10 * iota)\n    MB\n    GB\n    TB\n    PB\n    EB\n    ZB\n    YB\n)\n")),Object(i.b)("h3",{id:"init\u51fd\u6570"},"init\u51fd\u6570"),Object(i.b)("p",null,"init is called after all the variable declarations in the package have evaluated their initializers, and those are evaluated only after all the imported packages have been initialized."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),'func init() {\n    if user == "" {\n        log.Fatal("$USER not set")\n    }\n    if home == "" {\n        home = "/home/" + user\n    }\n    if gopath == "" {\n        gopath = home + "/go"\n    }\n    // gopath may be overridden by --gopath flag on command line.\n    flag.StringVar(&gopath, "gopath", gopath, "override default GOPATH")\n}\n')),Object(i.b)("h2",{id:"methods"},"Methods"),Object(i.b)("h3",{id:"pointers-vs-values"},"Pointers vs. Values"),Object(i.b)("p",null,"\u5982\u679c\u9700\u8981\u6539\u53d8\u503c\u5c31\u5b9a\u4e49\u4e3apointer"),Object(i.b)("h3",{id:"interface-conversions-and-type-assertions"},"Interface conversions and type assertions"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),'str, ok := value.(string)\nif ok {\n    fmt.Printf("string value is: %q\\n", str)\n} else {\n    fmt.Printf("value is not a string\\n")\n}\n')),Object(i.b)("h3",{id:"interface"},"interface"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"type Block interface {\n    BlockSize() int\n    Encrypt(dst, src []byte)\n    Decrypt(dst, src []byte)\n}\n")))}b.isMDXComponent=!0},230:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return f}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=r.a.createContext({}),b=function(e){var n=r.a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=b(e.components);return r.a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},d=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),p=b(t),d=a,f=p["".concat(c,".").concat(d)]||p[d]||u[d]||i;return t?r.a.createElement(f,l(l({ref:n},s),{},{components:t})):r.a.createElement(f,l({ref:n},s))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,c=new Array(i);c[0]=d;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,c[1]=l;for(var s=2;s<i;s++)c[s]=t[s];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);